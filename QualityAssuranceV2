% Overall Quality flag system as described by: Ubinet, M., Vesala, T. & Papale, D., 2012. 
%                                              Eddy Covariance: A Practical Guide to Measurement and Data Analysis, Springer atmospheric sciences.

% this program read the fulloutput file generated by Eddypro. Specifically,
% quality assurance test is evaluated and use to discard data, according to
% Foken, T. and B. Wichura. 1996. Tools for quality assessment of surface-based flux measurements. Agricultural and Forest Meteorology, 78: 83-105.
clear all; close all

% ==================== HEADERS ===================================
% Online_fluxes hdrs
%  YR DOY TIME RECORD	Hs	H	Fc_wpl	LE_wpl	Hc	tau	u_star	Ts_mean	stdev_Ts	cov_Ts_Ux	cov_Ts_Uy	cov_Ts_Uz	CO2_mean	stdev_CO2	cov_CO2_Ux	cov_CO2_Uy	cov_CO2_Uz	H2O_Avg	stdev_H2O	cov_H2O_Ux	cov_H2O_Uy	cov_H2O_Uz	fw_Avg	stdev_fw	cov_fw_Ux	cov_fw_Uy	cov_fw_Uz	Ux_Avg	stdev_Ux	cov_Ux_Uy	cov_Ux_Uz	Uy_Avg	stdev_Uy	cov_Uy_Uz	Uz_Avg	stdev_Uz	press_Avg	atm_press_mean	t_hmp_mean	H2O_hmp_mean	rh_hmp_mean	rho_a_mean	wnd_dir_compass	wnd_dir_csat3	wnd_spd	rslt_wnd_spd	std_wnd_dir	Fc_irga	LE_irga	CO2_wpl_LE	CO2_wpl_H	H2O_wpl_LE	H2O_wpl_H	n_Tot	csat_warnings	irga_warnings	del_T_f_Tot	sig_lck_f_Tot	amp_h_f_Tot	amp_l_f_Tot	chopper_f_Tot	detector_f_Tot	pll_f_Tot	sync_f_Tot	agc_Avg	agc_thrshld_excded_Tot	lws_1_Avg	lws_2_Avg	Rn_nr_Avg	albedo_Avg	Rs_downwell_Avg	Rs_upwell_Avg	Rl_downwell_Avg	Rl_upwell_Avg	T_nr_Avg	Rl_down_meas_Avg	Rl_up_meas_Avg	par_Avg	hfp01_1_Avg	hfp01_2_Avg	hfp01_3_Avg	hfp01_4_Avg	n_mux	precip_Tot	hor_wnd_spd_mean	hor_wnd_spd_mean_rslt	hor_wnd_dir_mean_rslt	hor_wnd_dir_stdev	panel_temp_Avg	batt_volt_Avg
% Ameriflux hdrs
% YEAR	GAP	DTIME	DOY	HRMIN	UST	TA	WD	WS	NEE	FC	SFC	H	SH	LE	SLE	FG	TS1	TSdepth1	TS2	TSdepth2	PREC	RH	PRESS	CO2	VPD	SWC1	SWC2	Rn	PAR	Rg	Rgdif	PARout	RgOut	Rgl	RglOut	H2O	RE	GPP	CO2top	CO2height	APAR	PARdif	APARpct	ZL


% 1.- Load file
% load FullOutput2010_2013a.dat; % Includes 2010_2013 data. All the columns with strings were removed
% load OnlineFluxes2010_2013.dat; % Online table to get met data

A=load('FullOutput2013.dat');
B=load('OnlineFluxes2013.dat');
C=load('Ameriflux2013.dat');
% D=load(ECTM)

% 2.-Assign name to each variable
YEAR=B(:,1); DOY=B(:,2); hour=B(:,3); 

% Variables needed as input for JENA
Rg=B(:,73);	Tair=B(:,43); rH=B(:,45);	
VPD=C(:,26);	
Tsoil=C(:,18);

% To get precipitation
precip_tot=B(:,88);

     %Corrected Fluxes and Quality Flags
tau=A(:,7); qc_Tau=A(:,8); randErrorTau=A(:,9);
H=A(:,10); qc_H=A(:,11); randErrorH=A(:,12);
LE=A(:,13); qc_LE=A(:,14); randErrorLE=A(:,15);
co2_flux=A(:,16); qc_co2_flux=A(:,17);randErrorFC=A(:,18);
h2o_flux=A(:,19);qc_h2o_flux=A(:,20);randErrorH2O=A(:,21);

% Other flags
w_co2_cov=A(:,156);
var_co2=A(:,148);
var_h2o=A(:,149);

agc=A(:,157);
ustar=A(:,78);
par_avg=B(:,82);

% The filtered values are stored here
co2_flux_filtered=co2_flux;
h2o_flux_filtered=h2o_flux;
LE_filtered=LE;
FC_nighttime=[];
N = length(DOY);  % size of data-vector

% % Conversion from mmol to mg of carbon
% === Forum answer====
% % To go from mg/L to mmol/L divide by the molecular weight.
% 1mmol of carbon has 44moles (molecular weight of CO2=44.0)

% 3. Replace -9999 to NaN

for i=1:N;
 if Rg(i)>=800;                 Rg(i)=NaN; end
 if rH(i)<=0;                   rH(i)=NaN; end
 if tau(i)==-9999;              tau(i)=NaN; end
 if tau(i)==9999;              tau(i)=NaN; end
 if qc_Tau(i)==-9999;          qc_Tau(i)=NaN; end
 if qc_Tau(i)==9999;          qc_Tau(i)=NaN; end
 if randErrorTau(i)==-9999;     randErrorTau(i)=NaN; end
 if randErrorTau(i)==9999;     randErrorTau(i)=NaN; end
 
 if H(i)==-9999;                H(i)=NaN; end
 if H(i)==9999;                H(i)=NaN; end
 if H(i)<=-100;                 H(i)=NaN; end
 if H(i)>=500;                 H(i)=NaN; end
 if qc_H(i)==-9999;             qc_H(i)=NaN; end
 if qc_H(i)==9999;             qc_H(i)=NaN; end
 if randErrorH(i)==-9999;       randErrorH(i)=NaN; end
 if randErrorH(i)==9999;       randErrorH(i)=NaN; end
 
 if LE(i)==-9999;               LE(i)=NaN; end
 if LE(i)==9999;               LE(i)=NaN; end
 if qc_LE(i)==-9999;            qc_LE(i)=NaN; end
 if qc_LE(i)==9999;            qc_LE(i)=NaN; end
 if randErrorLE(i)==-9999;      randErrorLE(i)=NaN; end
 if randErrorLE(i)==9999;      randErrorLE(i)=NaN; end
 
 if co2_flux(i)==-9999;         co2_flux(i)=NaN; end
 if co2_flux(i)==9999;         co2_flux(i)=NaN; end
 if co2_flux(i)==-10000;        co2_flux(i)=NaN; end
 if qc_co2_flux(i)==-9999;      qc_co2_flux(i)=NaN; end
 if qc_co2_flux(i)==9999;      qc_co2_flux(i)=NaN; end
 if randErrorFC(i)==-9999;      randErrorFC(i)=NaN; end
 if randErrorFC(i)==9999;      randErrorFC(i)=NaN; end
 
 if agc(i)==-9999;              agc(i)=NaN; end
 if agc(i)==9999;              agc(i)=NaN; end
 if agc(i)==-10000;             agc(i)=NaN; end
 if w_co2_cov(i)==-9999;        w_co2_cov(i)=NaN; end
 if w_co2_cov(i)==9999;        w_co2_cov(i)=NaN; end
 if w_co2_cov(i)==-10000;       w_co2_cov(i)=NaN; end
 if var_co2(i)==-9999;          var_co2(i)=NaN; end
 if var_co2(i)==9999;          var_co2(i)=NaN; end
 if var_co2(i)==-10000;         var_co2(i)=NaN; end
 if ustar(i)==-9999;            ustar(i)=NaN; end
 if ustar(i)==9999;            ustar(i)=NaN; end
 if ustar(i)==-10000;           ustar(i)=NaN; end
 if par_avg(i)==-9999;          par_avg(i)=NaN; end
 if par_avg(i)==9999;          par_avg(i)=NaN; end
 if par_avg(i)==-10000;         par_avg(i)=NaN; end
 if par_avg(i)==9999;           par_avg(i)=NaN; end
 if par_avg(i)==-9999;           par_avg(i)=NaN; end
 
 if co2_flux_filtered(i)==-9999;    co2_flux_filtered(i)=NaN; end
 if co2_flux_filtered(i)==9999;    co2_flux_filtered(i)=NaN; end
 if co2_flux_filtered(i)==-10000;   co2_flux_filtered(i)=NaN; end
%  if qc_co2_flux(i)==1;              co2_flux_filtered(i)=NaN; end
 if qc_co2_flux(i)==2;              co2_flux_filtered(i)=NaN; end
  if agc(i)>=70;                     co2_flux_filtered(i)=NaN; end 
%   if precip_tot(i)~=0;               co2_flux_filtered(i)=NaN; end
  if var_co2(i)>= 0.005;             co2_flux_filtered(i)=NaN; end
  if co2_flux_filtered(i)>= 6;       co2_flux_filtered(i)=NaN; end
  if co2_flux_filtered(i)<= -6;       co2_flux_filtered(i)=NaN; end
 
  if par_avg(i)<=10;              
     FC_nighttime(i)=co2_flux_filtered(i); 
     
    else
     FC_nighttime(i)=NaN;
     
  end
  
  if  ustar(i)<=0.1; FC_nighttime(i)=NaN; end
  if  FC_nighttime(i)<=0.1; co2_flux_filtered(i)=NaN;end
  
  
 if h2o_flux(i)==-9999;            h2o_flux(i)=NaN; end
 if h2o_flux(i)==9999;             h2o_flux(i)=NaN; end
 if h2o_flux(i)==-10000;           h2o_flux(i)=NaN; end
 if qc_h2o_flux(i)==-9999;         qc_h2o_flux(i)=NaN; end
 if qc_h2o_flux(i)==9999;          qc_h2o_flux(i)=NaN; end
 if randErrorH2O(i)==-9999;        randErrorH2O(i)=NaN; end
 if randErrorH2O(i)==9999;         randErrorH2O(i)=NaN; end
 
 if h2o_flux_filtered(i)==-9999;   h2o_flux_filtered(i)=NaN; end
 if h2o_flux_filtered(i)==9999;    h2o_flux_filtered(i)=NaN; end
 if h2o_flux_filtered(i)==-10000;  h2o_flux_filtered(i)=NaN; end
%  if qc_h2o_flux(i)==1;              h2o_flux_filtered(i)=NaN; end
 if qc_h2o_flux(i)==2;             h2o_flux_filtered(i)=NaN; end
 if agc(i)>=70;                    h2o_flux_filtered(i)=NaN; end 
%  if precip_tot(i)~=0;               h2o_flux_filtered(i)=NaN; end
  if var_h2o(i)>= 200;             h2o_flux_filtered(i)=NaN; end
  
 if LE_filtered(i)==-9999;         LE_filtered(i)=NaN; end
 if LE_filtered(i)==9999;          LE_filtered(i)=NaN; end
 if LE_filtered(i)==-10000;        LE_filtered(i)=NaN; end
 if LE_filtered(i)<=-10;           LE_filtered(i)=NaN; end
 if LE_filtered(i)>=300;           LE_filtered(i)=NaN; end
%  if qc_LE(i)==1;                    LE_filtered(i)=NaN; end
 if qc_LE(i)==2;                   LE_filtered(i)=NaN; end
 if agc(i)>=70;                    LE_filtered(i)=NaN; end 
%  if precip_tot(i)~=0;               LE_filtered(i)=NaN; end
  if var_h2o(i)>= 200;             LE_filtered(i)=NaN; end
%  if ustar(i)>= 2;                   ustar(i)=NaN; end
%  if ustar(i)<= -0.1;               ustar(i)=NaN; end
 
end

H_filtered=H;

FC_nighttime';
figure
set(gcf,'NumberTitle', 'off', 'Name', 'Corrected CO2_Fluxes with Gaps before quality flags')
subplot(2,1,1); plot(co2_flux,'b*')
subplot(2,1,2); plot(co2_flux_filtered,'r*')

figure
scatter(ustar,FC_nighttime');hold on; grid on; legend

figure
set(gcf,'NumberTitle', 'off', 'Name', 'Corrected H2O Fluxes with Gaps before quality flags')
subplot(2,1,1); plot(h2o_flux,'b*')
subplot(2,1,2); plot(h2o_flux_filtered,'r*')

figure
set(gcf,'NumberTitle', 'off', 'Name', 'Corrected LE Fluxes with Gaps before quality flags')
subplot(2,1,1); plot(LE,'b*')
subplot(2,1,2); plot(LE_filtered,'r*')


figure
set(gcf,'NumberTitle', 'off', 'Name', 'Corrected H Fluxes with Gaps before quality flags')
subplot(2,1,1); plot(H,'b*')
subplot(2,1,2); plot(H_filtered,'r*')


% Now we generate the quality flags required to feed data into the
% Renchestein-Jena Gap Filling online tool. 
% % USE ISNAN isnan  True for Not-a-Number.
%     isnan(X) returns an array that contains 1's where
%     the elements of X are NaN's and 0's where they are not.
%     For example, isnan([pi NaN Inf -Inf]) is [0 1 0 0].

qcCO2 = isnan(co2_flux_filtered);
qch2o = isnan(h2o_flux_filtered);
qcLE = isnan(LE_filtered);
qcH = isnan(H_filtered);

QCCO2=[];QCH2O=[];QCLE=[];QCH=[];

 for i=1:N
    if qcCO2(i)==1; QCCO2(i)=2; end
    if qcCO2(i)==0; QCCO2(i)=1; end
    
    if qch2o(i)==0; QCH2O(i)=1; end
    if qch2o(i)==1; QCH2O(i)=2; end
    
    
    if qcLE(i)==0; QCLE(i)=1; end
    if qcLE(i)==1; QCLE(i)=2; end
    
    if qcH(i)==0; QCH(i)=1; end
    if qcH(i)==1; QCH(i)=2; end
 end
 
QCCO2=QCCO2';
QCH2O=QCH2O';
QCLE=QCLE';
QCH=QCH';
 


% Final file
% M=[YEAR DOY hour co2_flux_filtered QCCO2 LE_filtered QCLE H_filtered QCH Rg Tair Tsoil rH VPD ustar];
M=[YEAR DOY hour co2_flux_filtered QCCO2 LE_filtered QCLE H_filtered QCH Rg Tair rH ustar];
save Jornada2013GapFill M -'ascii'



disp('The file jornada has beed saved')
disp('Go to:C:\Users\UTEP\Documents\MATLAB\VISFLUX\DataQuality ')



